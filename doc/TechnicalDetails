***This document is under construction***

WHAT IS PROMON

ProMon is a PhD research under Dr. Cook from New Mexico State University in which it provides a strong monitoring tool to monitor scientific application running under high performance computing system (HPCs). ProMon uses instrumentation techniques to produce information from the running application to monitor it. 

=========================================================================================
WHAT ARE THE DIFFERENT COMPONENTS OF PROMON

ProMon consists of four main components: promon_analyzer, promon_injector, promon_report and parser. 
promon_analyzer (analyzer): receives all the monitoring records and analyzes them.
promon_injector (injector): injects the monitoring instrumentation code to the application. 
promon_report (reporter): provides a summary of generated information from the analyzer.
parser: is an internal component that analysis the tag defined for injector.

=======================================================================================
GENERAL OVERVIEW OF THE MONITORING PROCESS

While the research on automating ProMon is under progress, currently, users define how to monitor their application. For example, users define how the application is alive by defining where application heartbeats occur. Or, they define where defensive IO or productive IO occurs. This process is done through the XML file that by default, has to be stored in pminput directory under ProMon. We call this XML file, promo_injector input.

The user also identify, for any application run, if a run is a "New" run or "restart" run, the snapshot directory, snapshot name format. And in cases of restart, they define how to find the restarted job id and from what snapshot restart occurred. This is done by python scripts that is also by default has to be saved in pminput directory under ProMon. We call these python code, script analyzer.

=======================================================================================
HOW TO WRITE INJECTOR XML INPUT

The XML input serves as interface between the user and ProMon. It instructs the promon_injector on how to instrument the monitoring code in to the defined application. A sample example of XML input is:

	<?xml version="1.0"?>
	<ProMonLang>
	   <Instrumentation>
	      <Priority>0</Priority>
	      <Mode>TAG_SINGULAR</Mode>
	      <Category>Run</Category>
	      <Function1>mainBody</Function1>
	      <Position1>BEGIN</Position1>
	      <Tag>
		 <TagName>Run</TagName>
		 <Data>TestApp</Data>
	      </Tag>
	   </Instrumentation>
	   <Instrumentation>
	      <Priority>0</Priority>
	      <Mode>TAG_DUAL</Mode>
	      <Category>Application</Category>
	      <Function1>mainBody</Function1>
	      <Position1>BEGIN</Position1>
	      <Function2>mainBody</Function2>
	      <Position2>END</Position2>
	      <Tag>
		 <TagName>Application</TagName>
	      </Tag>
	   </Instrumentation>
	   <Instrumentation>
	      <Priority>0</Priority>
	      <Mode>TAG_DUAL</Mode>
	      <Category>Application</Category>
	      <Function1>doSimIteration</Function1>
	      <Position1>BEGIN</Position1>
	      <Function2>doSimIteration</Function2>
	      <Position2>END</Position2>
	      <Tag>
		 <TagName>Heartbeat</TagName>
	      </Tag>
	   </Instrumentation>
	</ProMonLang>

The main element of XML file is "Instrumentation". This element defines the function name and the position where promo_injector to instrument the monitoring code. Instrumentation has many subelements that the details of each element is as follows: 

The two subelements "Category" and "Priority" is yet not been used but is defined for future possible statistic use. With the progress in the research, they will be either used or eleminated. Preliminary, they could be ignored.

"Mode" defines the nature of tag or the instrumentation code. Every instruction is considered a tag that could be "TAG_SINGULAR" or "TAG_DUAL". A singular has only one "Position1" in which defines the position of where the instrumentation occurs and, usually, it contains information regarding the moment that the execution of the application reached that tag. "Heartbeat" is an example of tag that defines the heartbeat of the application at the position that instrumentation occured. On the other hand, dual tags have "Position1" and "Position2" and they are mainly defined to measure the time between the two related positions of the tag. Users define their own tags in the XML file. The tag could have any name.

"Position1" is the position of instrumentation for "Function1" for instrumenting "TAG_SINGULAR". And in case of "TAG_DUAL", "Position1" is position for "Function1" and "Position2" is the position of instrumentation for "Function2". Currenlty we support "BEGIN" and "END" positions in which relativly they define the begin and end of a defined function (In future this trend will change). 

For example, in the above XML, the last instrumentation element defines a dual tag that instruments doSimIteration function with "Hearbeat" dual tag. Or the first instrumentation element that instructs promon_injector to instrument "mainBody" function with singular "Run" tag. 

"Tag" element is another important tag user defines. As an example, the third instrumentation element is a tag "Heartbeat" or the first one is "Run" that comes with extra data. Tags has the capability to send more data to promon_analyzer by using "extra" tag's subelement.

RULES IN DEFINING TAGS:

Tags are defined by users but there are five main tags that ProMon deal with them in a special manner. These five tags are "Run", "Application", "Hearbeat", "Setup" and "Checkpoint" (Case sensitive).  The first three are mandatory and they have to be defined in every XML file. "Heartbeat" defines the pulse of the application; It basically showes that application is alive. "Run" contains the name of the application as extra data. "Application" defines the begin and end of the application. 

The optional but important tags are "Setup" and "Checkpiont" dual tags. "Setup" is a dual tag that is treated special in the case of restart. The amount of time spent on "Setup" is considered "restart time" for the restarted run. "Checkpoint" defines the moment that checkpointing occurs and sets attributes to the snapshot or checkpoint file. For more information, check Gadget2.xml in pminput directory. 

=======================================================================================
HOW TO WRITE SCRIPT ANALYZER 

The script analyzer is a python script that assist the promon_analyzer to define if the current run is a new run or a restart run. Every application has a python script. If the script does not exist then the run will be always considered a new run. The main standard input for these scripts are the parametes passed to application to run. The script is called with the received of "Run" monitoring record and based on the received application's parameters, it returns information related to the running application in this format:

If the current run is a new run then it returns:
SnapShotOutPutDir:SnapshotBaseName:NEWRUN
If the current run is a restart run then it returns:
SnapShotOutPutDir:SnapshotBaseName:RESTART:RestartedJobID:RestartedFromSnapshotNo

Hence the implementation of these scripts is application dependent and it written by the user.
Here is an example of python script for testApp

	import sys
	import os

	input = str(sys.argv[1])
	
	il = input.split(':')

	output = list()

	f = open(il[0])
	for line in iter(f):
	   l = line.split()
	   if 'InitCondFile' in l:
	      initFile = l[1]
	   elif 'OutputDir' in l:
	      output.insert(0, l[1])
	   elif 'SnapshotFileBase' in l:
	      output.insert(1, l[1])
	f.close()

	if len(il) == 2:
		output.insert(2, 'RESTART')
		p = os.popen('attr -q -g JOBID '+initFile,"r")
		output.insert(3, p.readline().strip(' '))
	   
		p = os.popen('attr -q -g SNAPSHOTNO '+initFile,"r")
		output.insert(4, p.readline().strip(' '))
	   
	else :
		output.insert(2, 'NEW')

	# We are not using regular print. 
	# print function puts an extra '\n' which is not desirable
	sys.stdout.write(':'.join(output))


testApp is a serial/parallel application for demonstration of new run and restart run of an application. The parameter for testApp for new run is "file_path" and for restart run is "file_path:2". the file_path is the path to its parameter file. In the parameter file, the output directory for the snapshots and the format of the snapshots are defined. In case this run is a restart run, then the script also reads the attribute of the input file and gets the information about it's previous run rank id and the snapshot number that was used to run the restart.


